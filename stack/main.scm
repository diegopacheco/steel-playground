(define (make-stack)
  (let ((items '()))
    (lambda (op . args)
      (case op
        ((push) (set! items (cons (car args) items)))
        ((pop) (let ((top (car items)))
                 (set! items (cdr items))
                 top))
        ((top) (car items))
        ((empty?) (null? items))))))

(define stack (make-stack))
(stack 'push 1)
(stack 'push 2)
(stack 'push 3)
(display (stack 'top)) (newline)
(display (stack 'pop)) (newline)
(display (stack 'pop)) (newline)
(display (stack 'pop)) (newline)